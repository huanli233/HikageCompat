import{_ as s,o as n,c as a,e as l}from"./app-NfocEJii.js";const e={},o=l(`<h1 id="展望未来" tabindex="-1"><a class="header-anchor" href="#展望未来" aria-hidden="true">#</a> 展望未来</h1><blockquote><p>未来是美好的，也是不确定的，让我们共同期待 <code>HikageCompat</code> 在未来的发展空间。</p></blockquote><h2 id="未来的计划" tabindex="-1"><a class="header-anchor" href="#未来的计划" aria-hidden="true">#</a> 未来的计划</h2><blockquote><p>这里收录了 <code>HikageCompat</code> 可能会在后期添加的功能。</p></blockquote><h3 id="statebinding" tabindex="-1"><a class="header-anchor" href="#statebinding" aria-hidden="true">#</a> StateBinding</h3><p>这是对于 Hikage 的状态机制的增强，旨在提供类似于 <code>DataBinding</code> 的功能。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">setContentView</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 调用 StateBinding 的 bind 方法，得到一个原始 UiState 对象</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> uiState </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> viewModel.uiState.</span><span style="color:#DCBDFB;">collectAsHikageState</span><span style="color:#ADBAC7;">().</span><span style="color:#DCBDFB;">bind</span><span style="color:#ADBAC7;">()</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#F47067;">val</span><span style="color:#ADBAC7;"> helloText </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello, \${uiState.name}!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#DCBDFB;">TextView</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#768390;">// 在编译时，下面的代码将被 hikage-compiler 使用 observe 调用包装。</span></span>
<span class="line"><span style="color:#ADBAC7;">        text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> helloText</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理-attrtibuteset" tabindex="-1"><a class="header-anchor" href="#处理-attrtibuteset" aria-hidden="true">#</a> 处理 AttrtibuteSet</h3><p><code>Hikage</code> 未来将会尝试支持处理 <code>AttributeSet</code> 来对接 XML 原始的属性以实现接管一些并未在代码中对布局属性开放自定义的第三方组件。</p><p>不过，由于 Android 的 <code>attrs</code> 仅支持 Compiled XML ，且构建过程中资源编译在代码编译之前，因此难以实现，后续会考虑是否尝试编写。</p><blockquote><p>示例如下</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="shiki github-dark-dimmed" style="background-color:#22272e;" tabindex="0"><code><span class="line"><span style="color:#DCBDFB;">TextView</span><span style="color:#ADBAC7;">(</span></span>
<span class="line"><span style="color:#ADBAC7;">    id </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;text_view&quot;</span><span style="color:#ADBAC7;">,</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 通过 AttributeSet 传入的属性</span></span>
<span class="line"><span style="color:#ADBAC7;">    attrs </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> {</span></span>
<span class="line"><span style="color:#ADBAC7;">        </span><span style="color:#DCBDFB;">namespace</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;android&quot;</span><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">set</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;text&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;Hello, World!&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">set</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;textSize&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;16sp&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">            </span><span style="color:#F47067;">set</span><span style="color:#ADBAC7;">(</span><span style="color:#96D0FF;">&quot;gravity&quot;</span><span style="color:#ADBAC7;">, </span><span style="color:#96D0FF;">&quot;center&quot;</span><span style="color:#ADBAC7;">)</span></span>
<span class="line"><span style="color:#ADBAC7;">        }</span></span>
<span class="line"><span style="color:#ADBAC7;">    }</span></span>
<span class="line"><span style="color:#ADBAC7;">) {</span></span>
<span class="line"><span style="color:#ADBAC7;">    </span><span style="color:#768390;">// 通过代码传入的属性</span></span>
<span class="line"><span style="color:#ADBAC7;">    text </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#96D0FF;">&quot;Hello, World!&quot;</span></span>
<span class="line"><span style="color:#ADBAC7;">    textSize </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> </span><span style="color:#6CB6FF;">16f</span></span>
<span class="line"><span style="color:#ADBAC7;">    gravity </span><span style="color:#F47067;">=</span><span style="color:#ADBAC7;"> Gravity.CENTER</span></span>
<span class="line"><span style="color:#ADBAC7;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),p=[o];function t(c,i){return n(),a("div",null,p)}const d=s(e,[["render",t],["__file","future.html.vue"]]);export{d as default};
